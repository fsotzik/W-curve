#!/opt/bin/perl
########################################################################
# housekeeping
########################################################################

use v5.12;
use FindBin::libs;
use autodie     qw( open close );

use File::Basename;
use Getopt::Long;
use Parallel::Queue;
use Pod::Usage;

use WCurve;

########################################################################
# package variables
########################################################################

my $cmdline
= do
{
    my %argz    = ();

    my @optz
    = qw
    (
        jobs=i

        tmpdir=s
        output=s

        gap=f
        skip=f

        help!
        verbose!
    );

    my %defz
    = qw
    (
        jobs    1
        gap     0
        skip    0
        verbose 0
    );

    if( GetOptions \%argz, @optz )
    {
        $argz{ verbose } ||= 0;

        $argz{ help }
        and pod2usage
        -exitval    => 1,
        -verbose    => $argz{ verbose } || 1
    }
    else
    {
        pod2usage
        -exitval    => -1,
        -message    => 'Invalid option',
    }

    $argz{ $_ } //= $defz{ $_ }
    for keys %defz;

    $argz{ output }
    ||= do
    {
        if( @ARGV )
        {
            my $dir     = dirname $ARGV[0];
            my $base    = basename $ARGV[0], '.gz', '.bz2', '.fasta', '.fa';

            "$dir/$base.infile"
        }
        else
        {
            ''
        }
    };

    $argz{ tmpdir }
    ||= @ARGV
    ? dirname $ARGV[0]
    : '/var/tmp'
    ;

    if( $argz{ jobs } < 0 )
    {
        # obviously linux-specific. 
        # more portable approach would be a switch 
        # on O/S type.

        if( -e '/proc/cpuinfo' )
        {
            open my $fh, '<', '/proc/cpuinfo';

            local $/    = "\n";

            $argz{ jobs }   = grep /^processor/, <$fh>;
        }
        else
        {
            $argz{ jobs }   = 1;
        }
    };

    \%argz
};

my $proto   = WCurve->new( FloatCyl => 'Prototype' );

my @curvz   = $proto->read_seq;

my $path    = $proto->dist_matrix( $cmdline, @curvz );

print STDOUT "\nOutput in: $path\n";

0

__END__

=head1 NAME

compare-fasta - generate square, phylip-format distance 
matrix from sequences in a fasta file using the W-curve.

=head1 SYNOPSIS

    # output is "./path/to/foobar.infile"

    compare-fasta ./path/to/foobar.fasta;

    # run 4-way parallel.

    compare-fasta --jobs=4 ./path/to/foobar.fasta;

    # run one process for each core available
    # on linux (where /proc/cpuinfo is available).

    compare-fasta --jobs=0 ./path/to/foobar.fasta;

    # multiple files can be used, which is handy for
    # recycling wild or known-substitution sequences.
    #
    # output is based on the first path provided
    # (foobar.infile in this case).

    compare-fasta --jobs=0 ./path/to/foobar.fasta ./other/fasta/*;


=head1 DESCRIPTION

For a number of sequences stored in FASTA format, 
a W-curve is generarted for each and they are all
compared in parallel to produce an upper-triangular
distance matrix. The matrix rows are collected
together and reflected about the diagonal to get
a square matrix.

The resuilt is output in phylip format: a count on
the first row, followed by rows consisting of 10-
character identifiers and each distance preceeded
by a tab.


