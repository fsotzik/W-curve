#!/opt/bin/perl
########################################################################
# housekeeping
########################################################################

use v5.10;
use strict;
use FindBin::libs;

use Getopt::Long;
use IO::File;
use Parallel::Queue;
use Symbol;

use Benchmark       qw( :hireswallclock );
use Scalar::Util    qw( looks_like_number );

use WCurve;
use WCurve::Constants;

########################################################################
# package variables
########################################################################

my $pid = $$;

# default is upper triangular.

my @optz
= qw
(
    class=s
    verbose+

    debug!
    dummy!
    firstrow!
    keep!

    radius:f
    jobs=i

    compare=s
    name=s
    score=s
    type=s
);

my %defaultz
= qw
(
    compare matching_peaks
    score   single_value
    type    upper
    class   Floating

    jobs    1
    radius  0.50
    verbose 0
); 

my %cmdline = ();

GetOptions \%cmdline, @optz
or die "Bogus command line arguments";

my $name    = $cmdline{ name } || $$;

@cmdline{ qw( compare score ) } = ( ( 'dummy' ) x 2 )
if $cmdline{ dummy };

if( $cmdline{ firstrow } )
{
    @cmdline{ qw( type jobs debug ) } = qw( firstrow 0 1 );

    $cmdline{ verbose } //= 1;
}

$cmdline{ jobs } = 0 if $cmdline{ debug };

$cmdline{ $_ } //= $defaultz{ $_ }
for keys %defaultz;

for( $cmdline{ radius } )
{
    looks_like_number $_
    or die "Bothced $0: non-numeric radius ($_)";

    $_ > 0
    or die "Bothced $0: non-positive radius ($_)";
}

for( $cmdline{ jobs } )
{
    looks_like_number $_
    or die "Bothced $0: non-numeric job count ($_)";
}

my $type    = $cmdline{ type };

my $handler = __PACKAGE__->can( $type )
or die "Botched $0: no output type '$type'";

# syntatic sugar

my ( $jobs, $radius, $compare, $score, $verbose )
= @cmdline{ qw( jobs radius compare score verbose ) };

my $output  = $name . '.' . $type;

if( my @cruft = glob "$output.*" )
{
    unlink @cruft;
}

my @curvz
= do
{
    # deal with class definitions up here and use
    # an object as the prototype.

    my $proto   = WCurve->construct( $cmdline{ class } );

    my $handler = $proto->can( 'read_seq' )
    or die "Bogus class: '$proto' cannot read_seq";

    $proto->read_seq( @ARGV )
};

my $count   = 'firstrow' eq $type ? 1 : @curvz;
my $total   = $count * ( $count - 1 ) / 2;

my @tempz
= do
{
    my $seq     = 'zzz';

    map { $output . '.' . ++$seq . '.tmp' } ( 1 .. $count )
};

my @queue
= map
{
    my $i   = $_;

    sub{ $handler->( $i ) };
}
( 0 .. $count - 1 );

print
"\nProcessing: $count ($total compare) sequences ($tempz[0] .. $tempz[-1]) into $output\n";

########################################################################
# utility subs
########################################################################

sub output_row
{
    # compare the curve at this offset to the others.
    # upper and square take care of adjusting the 
    # avaiable curves for comarision.

    my ( $i, $wc ) = @_;

    # short-circut for firstrow processing.

    my $path    = $tempz[$i]
    or return;

    $0 = "phylip-output $wc ($path)";
    print $0, "\n";

    my $fh  = eval { IO::File->new( "> $path" ) }
    or die "$path: $@";

    $fh->autoflush( 1 );

    printf $fh "%-10.10s", "$wc"
    or die "printf: $!";

    for( @curvz )
    {
        my $a   = $wc->compare( $compare => $_, $radius, $verbose );
        my $b   = WCurve->score( $score   => $a );

        printf $fh "\t%6.4f", $b
        or die "printf: $!";
    }

    print $fh "\n"
    or die "print: $!";

    return
}

sub upper
{
    splice @curvz, 0, $_[0]
    if $jobs;

    push @_, shift @curvz;

    goto &output_row
}

sub square
{
    push @_, $curvz[ $_[0] ];

    &output_row;
}

sub firstrow
{
    push @_, shift @curvz;

    &output_row;
}

########################################################################
# generate the output in parallel, then contatenate it to stdout.
########################################################################

open my $out, '>', $output
or die "$output: $!";

print $out $count, "\n"
or die "$output: $!";

if( runqueue $jobs, @queue )
{
    die 'Unfinished queue';
}
else
{
    print $out
    map
    {
        open my $fh, '<', $_
        or die "$_: $!";

        local $/;

        <$fh>
    }
    @tempz
    or die "$output: $!";

    close $out;
};

END
{
    
    if
    (
        $$ != $pid
        or
        $cmdline{ keep }
        or
        $@
    )
    {
        local $, = "\n\t";

        print STDERR "Retaining tmp files:", @tempz, "\n";
    }
    else
    {
        unlink @tempz
    }
}

# this is not a module

0

__END__

=head1 NAME

phylip-output - WCurve-based output for phylip analysis.

=head1 SYNOPSIS

    # defaults:
    # 
    # compare matching_peaks    how to generate chunks
    # score   single_value      how to score the chunks
    # type    upper             upper or square output
    # class   Floating          WCurve::Floating->new(...)
    # 
    # jobs    1                 parallel processing
    # radius  0.50              matching_peaks radius
    # verbose 0                 normally quiet


    # input path(s) are on the command line, 
    # use '-' for input via STDIN.

    phylip-output input.fasta.gz;

    phylip-output < input.fasta -;
    gzip -dc < input.fasta.gz | phylip-output -;

    # up to three useful levels of verbosity.

    phylip-output --verbose                     input.fast.gz;
    phylip-output --verbose --verbose           input.fast.gz;
    phylip-output --verbose --verbose --verbose input.fast.gz;

    # generate only one row of output. mainly
    # useful to sanity check the input (since
    # all sequences are generated and compared).

    phylip-output --first-row input.fasta.gz

    # keep intermediate data files, mainly for debugging

    phylip-output --keep input.fasta.gz

    # use larger radius for skip chains on longer 
    # sequnces.

    phylip-output --radius=0.60 input.fasta.gz

=head1 DESCRIPTION

=head1 COPYRIGHT

=head1 AUTHOR

Steven Lembark <lembark@wrkhors.com>
