#!/opt/bin/perl
########################################################################
# housekeeping
########################################################################

use v5.10;
use strict;
use FindBin::libs;

use Getopt::Long;
use IO::File;
use Parallel::Queue;
use Pod::Usage;
use Symbol;

use Benchmark       qw( :hireswallclock );
use Scalar::Util    qw( looks_like_number );

use WCurve;
use WCurve::Constants;

########################################################################
# package variables
########################################################################

my $pid = $$;

# default is upper triangular.

my @optz
= qw
(
    help|h|?!

    class=s
    verbose+

    debug!
    dummy!
    firstrow!
    keep!

    radius:f
    jobs=i

    compare=s
    name=s
    score=s
    type=s
!
);

my %defaultz
= qw
(
    compare matching_peaks
    score   single_value
    type    upper
    class   Floating

    jobs    1
    radius  0.50
    verbose 0
); 

my %cmdline = ();

GetOptions \%cmdline, @optz
or pod2usage
(
    -message    => 'Invalid command line options',
    -verbose    => 0,
    -exitval    => 2,
);

%cmdline
or pod2usage
(
    -verbose    => 0,
    -exitval    => 1,
);

$cmdline{ help }
and pod2usage
(
    -verbose    => ( $cmdline{ verbose } || 1 ),
    -exitval    => 1,
);

my $name    = $cmdline{ name } || $$;

@cmdline{ qw( compare score ) } = ( ( 'dummy' ) x 2 )
if $cmdline{ dummy };

if( $cmdline{ firstrow } )
{
    @cmdline{ qw( type jobs debug ) } = qw( firstrow 0 1 );

    $cmdline{ verbose } //= 1;
}

$cmdline{ jobs } = 0 if $cmdline{ debug };

$cmdline{ $_ } //= $defaultz{ $_ }
for keys %defaultz;

for( $cmdline{ radius } )
{
    looks_like_number $_
    or die "Bothced $0: non-numeric radius ($_)";

    $_ > 0
    or die "Bothced $0: non-positive radius ($_)";
}

for( $cmdline{ jobs } )
{
    looks_like_number $_
    or die "Bothced $0: non-numeric job count ($_)";
}

my $type    = $cmdline{ type };

my $handler = __PACKAGE__->can( $type )
or die "Botched $0: no output type '$type'";

# syntatic sugar

my ( $jobs, $radius, $compare, $score, $verbose )
= @cmdline{ qw( jobs radius compare score verbose ) };

my $output  = $name . '.' . $type;

if( my @cruft = glob "$output.*" )
{
    unlink @cruft;
}

my @curvz
= do
{
    # deal with class definitions up here and use
    # an object as the prototype.

    my $proto   = WCurve->construct( $cmdline{ class } );

    my $handler = $proto->can( 'read_seq' )
    or die "Bogus class: '$proto' cannot read_seq";

    $proto->read_seq( @ARGV )
};

my $count   = 'firstrow' eq $type ? 1 : @curvz;
my $total   = $count * ( $count - 1 ) / 2;

my @tempz
= do
{
    my $seq     = 'zzz';

    map { $output . '.' . ++$seq . '.tmp' } ( 1 .. $count )
};

my @queue
= map
{
    my $i   = $_;

    sub{ $handler->( $i ) };
}
( 0 .. $count - 1 );

print
"\nProcessing: $count ($total compare) sequences ($tempz[0] .. $tempz[-1]) into $output\n";

########################################################################
# utility subs
########################################################################

sub output_row
{
    # compare the curve at this offset to the others.
    # upper and square take care of adjusting the 
    # avaiable curves for comarision.

    my ( $i, $wc ) = @_;

    # short-circut for firstrow processing.

    my $path    = $tempz[$i]
    or return;

    $0 = "phylip-output $wc ($path)";
    print $0, "\n";

    my $fh  = eval { IO::File->new( "> $path" ) }
    or die "$path: $@";

    $fh->autoflush( 1 );

    printf $fh "%-10.10s", "$wc"
    or die "printf: $!";

    for( @curvz )
    {
        my $a   = $wc->compare( $compare => $_, $radius, $verbose );
        my $b   = WCurve->score( $score   => $a );

        printf $fh "\t%6.4f", $b
        or die "printf: $!";
    }

    print $fh "\n"
    or die "print: $!";

    return
}

sub upper
{
    splice @curvz, 0, $_[0]
    if $jobs;

    push @_, shift @curvz;

    goto &output_row
}

sub square
{
    push @_, $curvz[ $_[0] ];

    &output_row;
}

sub firstrow
{
    push @_, shift @curvz;

    &output_row;
}

########################################################################
# generate the output in parallel, then contatenate it to stdout.
########################################################################

open my $out, '>', $output
or die "$output: $!";

print $out $count, "\n"
or die "$output: $!";

if( runqueue $jobs, @queue )
{
    die 'Unfinished queue';
}
else
{
    print $out
    map
    {
        open my $fh, '<', $_
        or die "$_: $!";

        local $/;

        <$fh>
    }
    @tempz
    or die "$output: $!";

    close $out;
};

END
{
    
    if
    (
        $$ != $pid
        or
        $cmdline{ keep }
        or
        $@
    )
    {
        local $, = "\n\t";

        print STDERR "Retaining tmp files:", @tempz, "\n";
    }
    else
    {
        unlink @tempz
    }
}

# this is not a module

0

__END__

=head1 NAME

phylip-output - WCurve-based output for phylip analysis.

=head1 SYNOPSIS

    # defaults:
    # 
    # compare matching_peaks    how to generate chunks
    # score   single_value      how to score the chunks
    # type    upper             upper or square output
    # class   Floating          WCurve::Floating->new(...)
    # 
    # jobs    1                 parallel processing
    # radius  0.50              matching_peaks radius
    # verbose 0                 normally quiet
    #
    # name    Process ID        $$
    #
    # at this point changing the compare or score
    # options is not useful; please use the defaults.

    # input path(s) are on the command line, 
    # use '-' for input via STDIN.

    phylip-output input.fasta.gz;

    phylip-output - < input.fasta;
    gzip -dc < input.fasta.gz | phylip-output -;

    # assign a name for the output files. the
    # default is the (not very useful) process-id.

    phylip-output --name 'sample-051'   outgroup.fasta 051.fasta.gz;

    # up to three useful levels of verbosity.
    # verbosity is also used for help (--help).

    phylip-output --verbose                     input.fast.gz;
    phylip-output --verbose --verbose           input.fast.gz;
    phylip-output --verbose --verbose --verbose input.fast.gz;

    # default behavior is to generate an upper-triangular
    # comparision matrix. alternative is square or 
    # "firstrow" which generates all of the curves and 
    # first row of the upper-triangular matrix (useful
    # for sanity checking the input data). 
    #

    phylip-output --upper       *.fasta.gz
    phylip-output --square      *.fasta.gz
    phylip-output --first-row   *.fasta.gz

    # keep intermediate data files, mainly for debugging

    phylip-output --keep input.fasta.gz

    # use larger radius for skip chains.

    phylip-output --radius=0.60 input.fasta.gz

    # number of parallel jobs to use for generating
    # comparision output. intermediate files are 
    # generated by forked processes, combined at the
    # end. using more than the number of CPU's on 
    # your system is probably a waste with this since
    # the jobs are CPU-bound.

    phylip-output --jobs=N  foo.fasta.gz bar.fasta.gz

=head1 DESCRIPTION

=head2 Command Line Use

This program uses the W-curve library (WCurve::*) to 
generate phylip-compatible upper-triangular or square 
comparision matrixes. These will normally be consumed
by neighbor or kitsch.

=over 4

=item --verbose

--verbose controls progress and help output. --help
with --verbose or "--verbose --verbose" (or -vv)
gets more detailed output.

=item --help

The normally useful switches are "--help", "--verbose", 
"--jobs", and "--name". Most of the time these will be
all that is necessary.

=item --name

You will almost always want to use "--name" to provde
some more mnemonic name than the Process ID ("PID"
or $$). Advantage to pids is that many jobs can be
started at once from shell scripts without colliding.

=item --jobs
--jobs defaults to one (1) (i.e., no forks) and is 
sufficient for smaller tasks. Depending on your 
hardware and process limits, using up to the number
of cores/CPU's on the system may be useful for the 
job count.

=back

Beyond that there is rarely a reason for using the 
other switches at this point.

=head2 Example

Among the sample data is data used for our CAMDA-2009 
presentation, the Mother-Infant ("MI") Study. The
input directory contains a number of files grouped
by sample ID (e.g., "051.fasta.gz") and one with all
of them and larger headers ("all.fasta.gz"). 

The output directory includes a number of files for
each of the study groups, including *.upper. These
are the output from this program for each of the 
input files. These were run with a --name parameter
of the study group's id (e.g., --name 051). Each one
was run 4-way parallel on linux with "taskset" to 
keep it running on the cores of a single CPU. This
led to a command line something like:

    for i in ../input/*.fasta.gz
    do
        base=$( basename $i '.fasta.gz' );
        taskset 0xF phylip-output --jobs=4 --name=$base $i;
    done

This produces a number of files like "051.upper" which 
were then processed via neighbor and drawgram to produce
the *.outtree, *.outfile, and *.phenogram* files.

=head1 AUTHOR

Steven Lembark <lembark@wrkhors.com>

=head1 COPYRIGHT

Copyright (C) 2009-2010 Steven Lembark.

=head1 LICENSE

This code is released under the same terms as Perl-5.10.1
itself.
