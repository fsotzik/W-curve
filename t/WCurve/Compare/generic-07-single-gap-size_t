#!/opt/bin/perl
########################################################################
# housekeeping
########################################################################

use v5.10;
use strict;
use FindBin::libs;

use Test::More;
use File::Basename;

use List::Util  qw( first min );

use WCurve::Test::RandomDNA;
use WCurve;
use WCurve::Values;
use WCurve::Util::DumperConfig;

use WCurve::Test::Cmdline [], [gap => 20 ];

########################################################################
# package variables
########################################################################

my %cmdline = test_opts;

my ( $base, $comp_type, $frag_type )
= @cmdline{ qw( base comp_type frag_type ) };

my ( $passes, $verbose, $debug )
= @cmdline{ qw( passes verbose debug ) };

my ( $snp_count, $max_gap, $base_size )
= @cmdline{ qw( snp gap base_size ) };

my $comp
= WCurve::Compare->new
(
    $comp_type,
    verbose     => $cmdline{ verbose    },
    debug       => $cmdline{ debug      },
    payload    => $cmdline{ payload   },
);

########################################################################
# begin the test
########################################################################

for my $pass ( 1 .. $passes )
{
    $0  = "$base pass $pass";
    print "\n$0\n";

    my $base_seq    = generate_seq uniform_random => $base_size;

    my $wc0         = WCurve->new( $frag_type => Fixed => $base_seq );
    my $wc1         = '';

    my $snp_window  = $wc0->fragment_type->snp_window;

    for my $gap_size ( 1  .. $max_gap )
    {
        my $max_offset  = $base_size - $gap_size - 16;

        for my $offset ( 8 .. $max_offset )
        {
            my $alt_seq    = $base_seq;

            my $gap
            = munge_seq insert_gap => $alt_seq, $offset, $gap_size;

            my $name    = "$gap ($gap_size) \@ $offset";

            $wc1    = $wc0->new( $name => $alt_seq );

            eval
            {
                my $chunkz  = $comp->compare( $wc0, $wc1 );

                $chunkz && @$chunkz
                or die "No chunks: $name";

                my $found   = $chunkz->[-2][4] - $chunkz->[-2][3];

                $found == $gap_size
                or die "Mismatched gap: $found ($name)";

                pass $name;

                1
            }
            or do
            {
                $comp->botched( compare => $@, $wc0, $wc1 );
            }
        }
    }
}

done_testing;

# this is not a module

0

__END__
