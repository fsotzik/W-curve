#!/opt/bin/perl
########################################################################
# housekeeping
########################################################################

use v5.12;
use strict;
use FindBin::libs;

use File::Basename;
use Test::More;
use Parallel::Queue;
use Symbol;

use List::Util  qw( first min );

use WCurve::Test::RandomDNA;
use WCurve::Compare;
use WCurve::Fragment;
use WCurve::Values;
use WCurve::Util::DumperConfig;

use WCurve::Test::Cmdline
[ qw( alt_size=i )      ],
[ alt_size =>  2 ** 6   ];

########################################################################
# package variables
########################################################################

my %cmdline = test_opts;

my ( $base, $comp_type, $frag_type )
= @cmdline{ qw( base comp_type frag_type ) };

my ( $snp_count, $passes, $base_size, $alt_size, $verbose, $debug )
= do
{
    @cmdline{ qw( snp passes base_size alt_size verbose debug ) }
};

my $comp
= WCurve::Compare->new
(
    $comp_type,
    verbose     => $cmdline{ verbose    },
    debug       => $cmdline{ debug      },
    payload    => $cmdline{ payload   },
);

my $max_off     = $base_size - $alt_size - 12;

$\  = "\n";
$"  = ' ';

########################################################################
# run the tests
########################################################################

my $i   = 0;

for my $pass ( 1 .. $passes )
{
    $0  = "$base pass $pass";
    print "\n$0\n";

    my $base_seq    = generate_seq uniform_random => $base_size;
    my $frag0
    = WCurve::Fragment->new( $frag_type => $base_seq, 'Fixed' );

    for my $offset ( 0 .. $max_off )
    {
        my $alt_seq = substr $base_seq, $offset, $alt_size;

        # skip places where short sequences exist before
        # the required offset.

        $offset == index $base_seq, $alt_seq
        or next;

        $frag0->head;

        my $frag1   = $frag0->new( $alt_seq, "$alt_size \@ $offset" );

        eval
        {
            my @nodz = $comp->align_fragments( composite => $frag0, $frag1 );

            @nodz or die "No initial alignment\n";

            my $found   = $nodz[1][3] - $nodz[2][3];

            $found == $offset or die "Mismatched offset: $found ($offset)";

            pass "$frag1";

            1
        }
        or do
        {
            $_->head for $frag0, $frag1;

            $comp->botched
            (
                align_fragments => $@,

                composite => $frag0, $frag1
            );
        }
    }
}

done_testing;

# this is not a module

0

__END__
