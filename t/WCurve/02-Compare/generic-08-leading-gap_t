#!/opt/bin/perl
########################################################################
# housekeeping
########################################################################

use v5.10;
use strict;
use FindBin::libs;

use File::Basename;
use Test::More;

use List::Util  qw( first min );

use WCurve::Test::RandomDNA;
use WCurve;
use WCurve::Values;
use WCurve::Util::DumperConfig;

use WCurve::Test::Cmdline [], [gap => 20 ];

########################################################################
# package variables
########################################################################

my %cmdline = test_opts;

my ( $base, $comp_type, $frag_type )
= @cmdline{ qw( base comp_type frag_type ) };

my ( $passes, $verbose, $debug )
= @cmdline{ qw( passes verbose debug ) };

my ( $snp_count, $max_gap, $base_size, )
= @cmdline{ qw( snp gap base_size ) };

my $comp
= WCurve::Compare->new
(
    $comp_type,
    verbose     => $cmdline{ verbose    },
    debug       => $cmdline{ debug      },
    payload    => $cmdline{ payload   },
);

my $base_seq    = generate_seq uniform_random => $base_size;
my $wc0         = WCurve->new( $frag_type => Fixed => $base_seq );
my $snp_window  = $wc0->fragment_type->snp_window;

########################################################################
# run the tests
########################################################################

for my $pass ( 1 .. $passes )
{
    $0  ="$base pass $pass";
    print "\n$0\n";

    for my $gap ( 1 .. $max_gap )
    {
        for my $offset ( 0 .. 2 )
        {
            my $base    = 1 + $offset;
            my $name    = "$gap \@ $base";

            my $alt_seq = $base_seq;

            munge_seq insert_gap => $alt_seq, $offset, $gap;

            my $wc1     = $wc0->new( $name => $alt_seq );

            my $chunkz
            = eval{ $comp->compare( $wc0, $wc1 ) };

            my ( $i, $j )   = @{ $chunkz->[-2] }[1,2];

            my $found   = $j - $i;
            my $count   = @$chunkz;

            my $nastygram   = '';

            given( $found )
            {
                when( 3 > @$chunkz )
                {
                    $nastygram  = "Missing chunks ($base, $pass)";
                }

                when( $found != $gap )
                {
                    $nastygram
                    = "Mismatched gap: $found ($gap, $base, $pass)";
                }
            }

            if( $nastygram )
            {
                my $message = join "\n",
                $nastygram,
                $@,
                "base_seq\t$base_seq",
                "alt_seq\t$alt_seq",
                Dumper $chunkz,
                ;

                fail $message;

                next
            }
            else
            {
                pass "Leading gap: $name ($pass)";
            }
        }
    }
}

done_testing;

# this is not a module

0

__END__
