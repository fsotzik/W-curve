#!/opt/bin/perl
########################################################################
# housekeeping
########################################################################

use v5.12;
use strict;
use FindBin::libs;

use File::Basename;
use WCurve::Test::RandomDNA;
use Test::More;
use Parallel::Queue;
use Symbol;

use List::Util  qw( first min );

use WCurve;
use WCurve::Compare;
use WCurve::Values;
use WCurve::Util::DumperConfig;

use WCurve::Test::Cmdline [], [ alt_size => 40 ];

########################################################################
# package variables
########################################################################

my %cmdline = test_opts;

my ( $base, $comp_type, $frag_type )
= @cmdline{ qw( base comp_type frag_type ) };

my ( $snp_count, $passes, $base_size, $alt_size, $verbose, $debug )
= @cmdline{ qw( snp passes base_size alt_size verbose debug ) };

my $comp
= WCurve::Compare->new
(
    $comp_type,
    verbose     => $cmdline{ verbose    },
    debug       => $cmdline{ debug      },
    payload    => $cmdline{ payload   },
);

my $max_offset  = $base_size - 4 * ( $alt_size + 4 ) - 16;

my $base_seq    = '';
my $alt_seq     = '';

########################################################################
# utility subs
########################################################################

########################################################################
# run tests
########################################################################

PASS:
for my $pass ( 1 .. $passes )
{
    $0  = "$base pass $pass";
    print "\n$0\n";

    $base_seq   = generate_seq uniform_random => $base_size;

    my $wc0     = WCurve->new( $frag_type => Single => $base_seq );

    my $snp_window  = $wc0->fragment_type->snp_window;

    munge_seq random_snp => $alt_seq, $snp_count;

    # align $frag1 without resetting $frag1 to the head.
    # validates that the composite framework for aligning
    # works.

    for my $offset ( 0 .. $max_offset )
    {
        my $prior   = 0;

        my @seq_defz
        = map
        {
            my $i       = $offset + $prior;
            $alt_seq    = substr $base_seq, $i, $alt_size;

            $i == index $base_seq, $alt_seq
            or next PASS;

            my $start   = $i + 1;
            my $stop    = $i + $alt_size;

            $prior      += $alt_size + 4;

            [ "$start .. $stop", $start, $stop ]
        }
        ( 0 .. 3 );

        # at this point seq_defz includes the sub-sequences
        # along with start and stop base numbers (i.e., in
        # base numbers not offsets).

        my $wc1
        = $wc0->new( "Fragments +$offset" => $base_seq, @seq_defz );

        my @fragz   = $wc1->fragments;

        ok @fragz == @seq_defz,     "Fragment count matches";

        my @resultz = $comp->compare( $wc0, $wc1 )
        or do
        {
            $comp->botched
            (
                compare => 'Empty results',
                $wc0, $wc1
            );

            next PASS
        };

        if( $comp->verbose )
        {
            print
            "\nSeq def:\n",
            Dumper \@seq_defz,
            "\nResultz:\n",
            Dumper \@resultz,
            "\n"
            ;
        }

        ok @resultz == @seq_defz,   "Fragment count matches";

        for my $frag ( @fragz )
        {
            my $seq     = shift @seq_defz;
            my $chunkz  = shift @resultz;

            @$chunkz
            or do
            {
                $comp->botched
                (
                    compare => "No alignment: $frag",
                    $wc0, $wc1
                );

                next PASS
            };

            my ( undef, $start, $stop ) = @$seq;

            my $begin   = $chunkz->[ 0][2];
            my $end     = $chunkz->[-1][4];

            if( $begin > $start + $snp_window )
            {
                $comp->botched
                (
                    compare => "Mismatched start: $start > $begin + $snp_window",
                    $wc0, $wc1
                );
            }
            elsif( $stop < $end - $snp_window )
            {
                $comp->botched
                (
                    compare => "Mismatched stop: $stop < $end - $snp_window",
                    $wc0, $wc1
                );
            }
            else
            {
                pass "Offset: $offset ($frag)";
            }
        }
    }
}

done_testing;

# this is not a module

0

__END__
